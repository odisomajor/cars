// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

// NextAuth.js required models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          UserRole  @default(BUYER)
  isVerified    Boolean   @default(false)
  resetToken    String?
  resetTokenExpiry DateTime?
  verificationToken String?
  verificationTokenExpiry DateTime?
  phoneVerified DateTime?
  phoneVerificationToken String?
  phoneVerificationTokenExpiry DateTime?
  refreshToken  String?   // For mobile app JWT authentication
  lastLoginAt   DateTime? // Track last login for mobile apps
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts      Account[]
  sessions      Session[]
  profile       Profile?
  listings      Listing[]
  rentalListings RentalListing[]
  favorites     Favorite[]
  rentalBookings RentalBooking[]
  reviews       Review[]
  receivedReviews Review[] @relation("ReviewTarget")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Custom models for car marketplace
model Profile {
  id          String   @id @default(cuid())
  userId      String   @unique
  firstName   String?
  lastName    String?
  phone       String?
  location    String?
  bio         String?
  avatar      String?
  companyName String?  // For dealers and rental companies
  companyLogo String?  // For dealers and rental companies
  website     String?  // For dealers and rental companies
  licenseNumber String? // For rental companies
  isCompanyVerified Boolean @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Listing {
  id          String      @id @default(cuid())
  userId      String
  title       String
  description String
  make        String
  model       String
  year        Int
  price       Float
  mileage     Int?
  condition   String      // Changed from CarCondition enum to String
  fuelType    String      // Changed from FuelType enum to String
  transmission String     // Changed from Transmission enum to String
  bodyType    String      // Changed from BodyType enum to String
  color       String?
  location    String
  engineSize  String?
  images      String      // JSON string of image URLs
  features    String      // JSON string of features
  listingType String      @default("free") // free, featured, premium, spotlight
  status      String      @default("draft") // draft, active, inactive, expired, sold, archived
  views       Int         @default(0)
  contactCount Int        @default(0)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  expiresAt   DateTime?

  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  favorites Favorite[]
  reviews   Review[]
}

model RentalListing {
  id          String   @id @default(cuid())
  userId      String
  title       String
  description String
  make        String
  model       String
  year        Int
  category    RentalCategory
  pricePerDay Float
  fuelType    FuelType
  transmission Transmission
  seats       Int
  color       String?
  location    String
  images      String      // JSON string of image URLs
  features    String      // JSON string of features
  isActive    Boolean     @default(false)
  isFeatured  Boolean     @default(false)
  isPremium   Boolean     @default(false)
  isSpotlight Boolean     @default(false)
  isDraft     Boolean     @default(true)
  views       Int         @default(0)
  minRentalDays Int       @default(1)
  maxRentalDays Int?      
  availableFrom DateTime?
  availableTo   DateTime?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  user     User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  bookings RentalBooking[]
  reviews  Review[]
}

model Favorite {
  id        String   @id @default(cuid())
  userId    String
  listingId String
  createdAt DateTime @default(now())

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  listing Listing @relation(fields: [listingId], references: [id], onDelete: Cascade)

  @@unique([userId, listingId])
}

model RentalBooking {
  id            String        @id @default(cuid())
  userId        String
  rentalListingId String
  startDate     DateTime
  endDate       DateTime
  totalDays     Int
  totalPrice    Float
  status        BookingStatus @default(PENDING)
  customerName  String
  customerPhone String
  customerEmail String
  notes         String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  user          User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  rentalListing RentalListing @relation(fields: [rentalListingId], references: [id], onDelete: Cascade)
}

model Review {
  id        String   @id @default(cuid())
  userId    String   // Reviewer
  targetId  String   // User being reviewed
  listingId String?  // Car listing (optional)
  rentalListingId String? // Rental listing (optional)
  rating    Int      // 1-5 stars
  comment   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user          User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  target        User           @relation("ReviewTarget", fields: [targetId], references: [id], onDelete: Cascade)
  listing       Listing?       @relation(fields: [listingId], references: [id], onDelete: Cascade)
  rentalListing RentalListing? @relation(fields: [rentalListingId], references: [id], onDelete: Cascade)
}

// Enums
enum UserRole {
  BUYER
  SELLER
  RENTAL_COMPANY
  ADMIN
}

enum CarCondition {
  NEW
  USED
  CERTIFIED_PRE_OWNED
}

enum FuelType {
  PETROL
  DIESEL
  HYBRID
  ELECTRIC
  LPG
}

enum Transmission {
  MANUAL
  AUTOMATIC
  CVT
}

enum BodyType {
  SEDAN
  HATCHBACK
  SUV
  COUPE
  CONVERTIBLE
  WAGON
  PICKUP
  VAN
  MINIVAN
}

enum RentalCategory {
  ECONOMY
  COMPACT
  MIDSIZE
  FULLSIZE
  SUV
  LUXURY
  VAN
  PICKUP
}

enum BookingStatus {
  PENDING
  CONFIRMED
  ACTIVE
  COMPLETED
  CANCELLED
  REJECTED
}
